#!/usr/bin/env node
const fs = require("fs-extra")

const extraLibs = require("~/utils/extra-libs")

const main = async () => {
  const buildPath = "build"

  const prepareYarn = async () => {
    const nodeModulePaths = ["../../node_modules", "node_modules"]

    const files = []
    for (const nodeModulePath of nodeModulePaths) {
      const yarnpkgPath = `${nodeModulePath}/@yarnpkg`
      if (!(await fs.pathExists(yarnpkgPath))) {
        continue
      }
      const addFiles = await fs.readdir(yarnpkgPath)
      files.push(...addFiles)
    }

    const lines = files
      .filter((file) => file.startsWith("plugin-"))
      .map((file) => `  "${file}": require("@yarnpkg/${file}"),`)
      .join("\n")

    const content = `module.exports = {\n${lines}\n};`

    await fs.writeFile(`${buildPath}/require-yarnpkg-plugins.js`, content)
  }

  const prepareRequire = async () => {
    const packagesFiles = [
      "../../packages/blueprint/package.json",
      "./package.json",
    ]
    const packages = await Promise.all(
      packagesFiles.map(async (file) =>
        JSON.parse(await fs.readFile(file, { encoding: "utf-8" }))
      )
    )
    const dependencies = [
      ...new Set([
        ...packages.flatMap((pk) => Object.keys(pk.dependencies || {})),
        ...extraLibs,
      ]),
    ]

    const lines = dependencies
      .map((dep) => `  "${dep}": ()=>require("${dep}"),`)
      .join("\n")

    const content = `module.exports = {\n${lines}\n};`

    await fs.writeFile(`${buildPath}/require-map.js`, content)
  }

  await fs.ensureDir(buildPath)
  await prepareYarn()
  await prepareRequire()
}

main()
